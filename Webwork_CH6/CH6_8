def mod_exp(a, n, m):
    result = 1
    while n > 0:
        if n % 2 == 1:
            result = (result * a) % m
        a = (a * a) % m
        n //= 2
    return result

def extended_gcd(a, b):
    s0, t0 = 1, 0
    s1, t1 = 0, 1

    while b != 0:
        quotient = a // b
        a, b = b, a - quotient * b
        s0, s1 = s1, s0 - quotient * s1
        t0, t1 = t1, t0 - quotient * t1

    return a, s0, t0

def mod_inverse(a, n):
    gcd, s, t = extended_gcd(a, n)
    if gcd == 1:
        return s % n
    return None

# Part a
a = 307
n = 433
result_a = mod_exp(a, 432, n)
print("307^432 ≡", result_a, "mod", n)

# Part b
a = 37
n = 67
result_b = mod_exp(a, 3765, n)
print("37^3765 ≡", result_b, "mod", n)

# Part c
a = 94
n = 211
result_c = mod_exp(a, 212, n)
print("94^212 ≡", result_c, "mod", n)

# Compute the modular inverse
mod_inv = mod_inverse(37, 67)
print("37^(-1) ≡", mod_inv, "mod", 67)

