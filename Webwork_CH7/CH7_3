def factorize(n):
    # Function to factorize the number n into its constituent primes p and q
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            p = i
            q = n // i
            return p, q
    return None, None

def compute_phi(p, q):
    # Function to compute the Euler's totient function (phi) of N
    return (p - 1) * (q - 1)

def mod_inverse(a, m):
    # Function to compute the modular inverse of a mod m
    m0 = m
    y = 0
    x = 1

    if m == 1:
        return 0

    while a > 1:
        q = a // m
        t = m
        m = a % m
        a = t
        t = y
        y = x - q * y
        x = t

    if x < 0:
        x += m0

    return x

# Given parameters
N = 7003
e = 3
y = 2540

# Step 1: Factorize N into p and q
p, q = factorize(N)

# Step 2: Compute 𝜑(𝑁)
phi_N = compute_phi(p, q)

# Step 3: Compute 𝑑, the decryption exponent
d = mod_inverse(e, phi_N)

# Step 4: Decrypt y to find the plaintext x
x = pow(y, d, N)

print("p:", p)
print("q:", q)
print("𝜑(N):", phi_N)
print("𝑑:", d)
print("Decrypted plaintext (x):", x)
